---
## Kubeoverride should be updated for 16.6.0 Deployment
kubeVersionOverride: "1.25.0"
prometheus:
  prometheusSpec:
    resources:
      limits:
        memory: 12Gi
        cpu: 2000m
      requests:
        memory: 8Gi
        cpu: 700m
    replicas: 2
    externalLabels:
      cluster: cluster1
    storageSpec:
    ## Using PersistentVolumeClaim
    ##
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi
    # additionalScrapeConfigsSecret:
    #   enabled: true
    #   name: additional-scrape-configs
    #   key: prometheus-scrape.yaml

    thanos:
      image: "quay.io/thanos/thanos:v0.24.0"
      version: v0.24.0
      objectStorageConfig:
        name: thanos
        key: thanos-object-store.yaml
  thanosService:
    enabled: true
    httpPortName: http
    httpPort: 10902
    targetHttpPort: "http"
    ## Port to expose on each node, if service type is NodePort
    httpNodePort: 30902

  thanosServiceMonitor:
    enabled: true

  # thanosServiceExternal:
  #   enabled: true
  #   annotations:
  #     service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
  #     service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
  #     service.beta.kubernetes.io/aws-load-balancer-type: nlb
  #     service.beta.kubernetes.io/aws-load-balancer-internal: 'true'
  thanosIngress:
    enabled: true
    ingressClassName: "nginx"
    hosts:
      - thanos.homelabs.local
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: GRPC
      nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'
      nginx.ingress.kubernetes.io/grpc-backend: 'true'
    tls:
     - secretName: thanos-sc-crt
       hosts:
       - thanos.homelabs.local
    path:
      - /
    pathType: ImplementationSpecific
grafana:
  image:
     repository: grafana/grafana
     tag: 9.2.20
     pullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      memory: 4000Mi
      cpu: 2000m
    requests:
      memory: 2000Mi
      cpu: 2000m
  persistence:
    type: statefulset
    enabled: true
    storageClassName: longhorn
    accessModes:
      - ReadWriteOnce
    size: 10Gi
  grafana.ini:
    plugins:
      enable_alpha: true
    alerting:
      enabled: false
    unified_alerting:
      enabled: true
    users:
      auto_assign_org_role: Viewer
    auth:
      disable_login_form: false
    auth.anonymous:
      enabled: false
      org_role: Viewer
    auth.basic:
      enabled: false
    # auth.azuread:
    #   name: Azure AD
    #   enabled: true
    #   allow_sign_up: true
    #   client_id: __vault__prd__grafana_client_id
    #   client_secret: __vault__prd__grafana_client_secret
    #   scopes: openid email profile
    #   auth_url: https://login.microsoftonline.com/7003a083-0078-491a-b0c6-12b3733b6121/oauth2/v2.0/authorize
    #   token_url: https://login.microsoftonline.com/7003a083-0078-491a-b0c6-12b3733b6121/oauth2/v2.0/token
    #   allowed_domains: synchronoss.com
    #   allowed_groups: 606166c8-9955-4a74-bad7-943143c60841, 68c73d67-adee-40a5-b9e8-2a1376bfdd4f, c5bef97f-2512-4996-9516-1e295bb22939
    # smtp:
    #   enabled: true
    #   host: email-smtp.us-east-1.amazonaws.com:587
    #   user: __vault__prd__grafana_smtp_user
    #   password: __vault__prd__grafana_smtp_password
    #   from_address: grafana-prod@infraservices.prod.cloud.synchronoss.net
    #   from_name: Grafana PROD
    server:
      domain: grafana.homelabs.local
      root_url: https://%(domain)s/
      enable_gzip: true
    live:
      max_connections : 0
      allowed_origins : https://grafana.homelabs.local
    security:
      cookie_secure: true
    # database:
    #   type: mysql
    #   host: infrasvc.cluster-cwfjkqspvazf.us-east-1.rds.amazonaws.com:3306
    #   name: grafana_prod
    #   user: __vault__prd__grafana_database_user
    #   password: __vault__prd__grafana_database_password
    # enterprise:
    #   license_text: __vault__prd__grafana_ent_license
  # ingress:
  #   enabled: true
  #   path: /
  #   annotations:
  #     alb.ingress.kubernetes.io/group.name: "monitoring"
  #     alb.ingress.kubernetes.io/scheme: "internal"
  #     kubernetes.io/ingress.class: "nginx"
  #     alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:449152204314:certificate/0b066e06-d420-4561-9a89-1576af6171e9"
  #     alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
  #     alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
  #     alb.ingress.kubernetes.io/healthcheck-path: "/api/health"
  #     external-dns.alpha.kubernetes.io/hostname: 'grafana.synchronoss.net'
  #     alb.ingress.kubernetes.io/target-type: 'ip'
  imageRenderer:
    deploymentStrategy: {}
    # Enable the image-renderer deployment & service
    enabled: true
    replicas: 1
    image:
      # image-renderer Image repository
      repository: grafana/grafana-image-renderer
      # image-renderer Image tag
      tag: latest
      # image-renderer Image sha (optional)
      sha: ""
      # image-renderer ImagePullPolicy
      pullPolicy: Always
    # extra environment variables
    env:
      HTTP_HOST: "0.0.0.0"
    serviceAccountName: ""
  # image-renderer deployment securityContext
    securityContext: {}
    # image-renderer deployment container securityContext
    containerSecurityContext:
      capabilities:
        drop: ['ALL']
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
    # image-renderer deployment Host Aliases
    hostAliases: []
    # image-renderer deployment priority class
    priorityClassName: ''
    service:
      # Enable the image-renderer service
      enabled: true
      # image-renderer service port name
      portName: 'http'
      # image-renderer service port used by both service and deployment
      port: 8081
      targetPort: 8081
      # Adds the appProtocol field to the image-renderer service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
      appProtocol: ""
    # If https is enabled in Grafana, this needs to be set as 'https' to correctly configure the callback used in Grafana
    grafanaProtocol: http
    # In case a sub_path is used this needs to be added to the image renderer callback
    grafanaSubPath: ""
    # name of the image-renderer port on the pod
    podPortName: http
    # number of image-renderer replica sets to keep
    revisionHistoryLimit: 10
    networkPolicy:
      # Enable a NetworkPolicy to limit inbound traffic to only the created grafana pods
      limitIngress: true
      # Enable a NetworkPolicy to limit outbound traffic to only the created grafana pods
      limitEgress: false
  sidecar:
    dashboards:
      multicluster:
        global:
          enabled: true
kubeControllerManager:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false
alertmanager:
  secret:
    cleanupOnUninstall: true
  alertmanagerSpec:
    configSecret: alertmanager-sc
additionalPrometheusRulesMap:
#  rule-name:
#    groups:
#    - name: monitor_service_up
#      rules:
#      - alert: monitor_service_up
#        annotations:
#          description: "Service {{ $labels.instance }} is up"
#          summary: "Monitor Serivice non-operational"
#        expr: "up == 1"
#        for: 30s
#        labels:
#          severity: critical
prometheusOperator:
  admissionWebhooks:
    patch:
      image:
          repository: registry.k8s.io/ingress-nginx/kube-webhook-certgen
          tag: v1.0
          sha: "f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068"
          pullPolicy: IfNotPresent
